
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PrinterException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mahmoud
 */
public class EditSaleGUI extends javax.swing.JFrame implements ClientInterface {

    private AppInterface app;
    DefaultTableModel model = new DefaultTableModel();
    ArrayList<SalesInterface> sales;
//    int sale_id = -1;
//    int selectedIndex;

    /**
     * Creates new form EditSaleGUI
     */
    public EditSaleGUI() throws RemoteException, NotBoundException {
        initComponents();
        this.setLocation(300,200);
        this.setTitle("Edit Sale");
        getTheService();
        UnicastRemoteObject.exportObject(this, 0);
        jTable1.setModel(model);
        model.addColumn("sales id");
        model.addColumn("photographer");
        model.addColumn("the tour guide");
        model.addColumn("Price");
        model.addColumn("Date");
        model.addColumn("Time");

        sales = app.sendAllSales();
        for (SalesInterface sale : sales) {
            model.addRow(new Object[]{sale.getId(), sale.getPhotographer().getFirstName() + " " + sale.getPhotographer().getSecondName(), sale.getTourGide().getFirstName() + " " + sale.getTourGide().getSecondName(), sale.getPrice(), sale.getDate(), sale.getTime()});
        }
        app.addClient(this);

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                try {
                    f();
                } catch (RemoteException ex) {
                    Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    public void f() throws RemoteException {
        app.logout(this);
        System.exit(0);
    }

    private void getTheService() throws RemoteException, NotBoundException {
        PropertiesDevice pd = PropertiesDevice.getDevice();
        Registry reg = LocateRegistry.getRegistry(pd.getIp(),1099);
        app = (AppInterface) reg.lookup(AppInterface.APP_NAME);
    }

    private void showInformation() throws RemoteException {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        priceIn = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        unitPrice = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("price :");

        editButton.setBackground(new java.awt.Color(0, 153, 204));
        editButton.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        editButton.setForeground(new java.awt.Color(255, 255, 255));
        editButton.setText("Edit price");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 204));
        jButton1.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Show details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 153, 204));
        jButton2.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Sales table :");

        jButton3.setBackground(new java.awt.Color(0, 153, 204));
        jButton3.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Delete everything");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        unitPrice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Turky", "$", "â‚¬" }));

        jButton4.setBackground(new java.awt.Color(0, 153, 204));
        jButton4.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Print");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30)
                        .addComponent(priceIn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(priceIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton)
                    .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            new SalesManagementGUI().setVisible(true);
            app.logout(this);
            this.dispose();
        } catch (RemoteException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            int res1 = app.DeleteAllSales();
            app.resetSeqSales();
            app.resetSeqEditSales();
            int res2 = app.DeleteAllEditSales();
            if (res1 * res2 > 0 || res1 > 0) {
                app.sendMessageToAll("Successfully, delete sales");
                DefaultTableModel model = new DefaultTableModel();
                jTable1.setModel(model);
                model.addColumn("sales id");
        model.addColumn("photographer");
        model.addColumn("tour guide");
        model.addColumn("Price");
        model.addColumn("Date");
        model.addColumn("Time");
            } else {
                app.sendMessageToAll("Failed, Delete sales");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        double dollar = 0;
        double euro = 0 ;
        PropertiesDevice pd = PropertiesDevice.getDevice();
        SalesInterface sale = pd.getSale();
        
        if(sale == null){
            JOptionPane.showMessageDialog(this,"Selected item not found");
        }else{
            try {
            dollar = app.getDollar();
            euro = app.getEuro();
            sale.setDollar(dollar);
            sale.setEuro(euro);
        } catch (RemoteException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        int unitType = unitPrice.getSelectedIndex();
        int res1 = 0;
        double oldPrice;
        double newprice = 0;
        String newPreiceStr = priceIn.getText();
        boolean b = true;
        if (newPreiceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "please enter your value");
            b = false;
        } else {
            try {
                newprice = Double.parseDouble(newPreiceStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "your value incurrect");
                b = false;
            }
        }
        if (b) {
            if (newprice <= 0) {
                JOptionPane.showMessageDialog(this, "your value incurrect");
            } else {
                try {
                    oldPrice = sale.getPrice();
                    sale.getPhotographer().withdraw(oldPrice * sale.getPhotographer().getPercent() / 100.0);
                    if (sale.getTourGide().getFirstName() != null) {
                        sale.getTourGide().withdraw(oldPrice * sale.getTourGide().getPercent() / 100.0);
                    }
                    sale.setPrice(newprice, unitType);
                    newprice = sale.getPrice();
                    sale.getPhotographer().deposit(newprice);
                    if (sale.getTourGide().getFirstName() != null) {
                        sale.getTourGide().deposit(newprice);
                        res1 = app.updateTourGuide(sale.getTourGide());
                    }
                    int res2 = app.updatePhotographer(sale.getPhotographer());
                    Manager.getManager().setPercent(100 - sale.getPhotographer().getPercent() - sale.getTourGide().getPercent());
                    Manager.getManager().withdraw(oldPrice);
                    double salaryManager = Manager.getManager().deposit(newprice);
                    int res3 = app.updateManager(Manager.getManager());
                    String date = Date.valueOf(LocalDate.now()).toString();
                    String time = Time.valueOf(LocalTime.now()).toString();
                    sale.setDate(date);
                    sale.setTime(time);
                    int res4 = app.updateSale(sale);
                    app.refreshSales(app.sendAllSales());
                    int res5 = app.createEditSale(sale.getId(), oldPrice, newprice);
                    priceIn.setText("");
                    if (res1 * res2 * res3 * res4 * res5 > 0) {
                        app.sendMessageToAll("Successfully,Edit sale");
                        pd.setSale(null);
                    } else {
                        app.sendMessageToAll("Failed, Edit sale");
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        }
        

    }//GEN-LAST:event_editButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        SalesInterface sale = sales.get(jTable1.getSelectedRow());
        try {
            priceIn.setText(sale.getPrice() + "");
            PropertiesDevice pd = PropertiesDevice.getDevice();
            pd.setSale(sale);
        } catch (RemoteException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            jTable1.print();
        } catch (PrinterException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            PropertiesDevice pd = PropertiesDevice.getDevice();
            if(pd.getSale() != null){
            new ShowDetilesSaleGUI().setVisible(true);
            app.logout(this);
            this.dispose();
            }else{
                JOptionPane.showMessageDialog(this,"Selected item not found");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditSaleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new EditSaleGUI().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NotBoundException ex) {
                    Logger.getLogger(EditSaleGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField priceIn;
    private javax.swing.JComboBox unitPrice;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recieveManager(String firstName, String secondName, double account, double percent) throws RemoteException {
                Manager manager = Manager.getManager();
        manager.setAccount(account);
        manager.setPercent(percent);
        manager.setFirstName(firstName);
        manager.setSecondName(secondName);
    }

    @Override
    public void reciveIdPhotographer(PhotogragherInterface ph, int selectedIndex) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveMessage(String message) throws RemoteException {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(this, message);
        });
    }

    @Override
    public void recivePhotographers(ArrayList<PhotogragherInterface> phs) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveGuides(ArrayList<TourGuidesInterface> gus) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveValueCoin(double value, String type) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveSales(ArrayList<SalesInterface> sales1) throws RemoteException {
        DefaultTableModel model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("sales id");
        model.addColumn("photographer");
        model.addColumn("tour guide");
        model.addColumn("Price");
        model.addColumn("Date");
        model.addColumn("Time");
        for (SalesInterface sale : sales1) {
            model.addRow(new Object[]{sale.getId(), sale.getPhotographer().getFirstName() + " " + sale.getPhotographer().getSecondName(), sale.getTourGide().getFirstName() + " " + sale.getTourGide().getSecondName(), sale.getPrice(), sale.getDate(), sale.getTime()});
        }
        sales = sales1;
    }

    @Override
    public void reciveOutlayList(ArrayList<Outlay> outlayList) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
