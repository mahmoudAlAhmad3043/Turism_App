
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mahmoud
 */
public class GuideGUI extends javax.swing.JFrame implements ClientInterface{
    private AppInterface app;
    PropertiesDevice pd = PropertiesDevice.getDevice();
    private ArrayList<TourGuidesInterface> guides;
    /**
     * Creates new form GuideGUI
     */
    public GuideGUI() throws RemoteException, NotBoundException {
        initComponents();
        this.setLocation(450,200);
        this.setTitle("Guide");
        getTheService();
        UnicastRemoteObject.exportObject(this, 0);
        app.addClient(this);
        guides = app.sendAllGuides();
        for(TourGuidesInterface gu :guides){
            if(gu.getId() == pd.getTourGuide().getId()){
                pd.setTourGuide(gu);
                break;
            }
        }
        fNameInput.setText(pd.getTourGuide().getFirstName());
        sNameInput.setText(pd.getTourGuide().getSecondName());
        percentInput.setText(pd.getTourGuide().getPercent()+"");
        accountInput.setText(pd.getTourGuide().getAccount()+"");
        
         this.addWindowListener(new WindowAdapter()  {
            public void windowClosing(WindowEvent e)  {
               
                try {
                    f();
                } catch (RemoteException ex) {
                    Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }
private void getTheService() throws RemoteException, NotBoundException{
        PropertiesDevice pd = PropertiesDevice.getDevice();
        Registry reg = LocateRegistry.getRegistry(pd.getIp(),1099);
        app = (AppInterface) reg.lookup(AppInterface.APP_NAME);
    }
    
    public void f() throws RemoteException{
        app.logout(this);
        System.exit(0);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountInput = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        withdrowButton = new javax.swing.JButton();
        fNameInput = new javax.swing.JTextField();
        sNameInput = new javax.swing.JTextField();
        percentInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        accountInput.setText("0");

        editButton.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        editButton.setForeground(new java.awt.Color(255, 255, 255));
        editButton.setText("Edit tour guide");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        withdrowButton.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        withdrowButton.setForeground(new java.awt.Color(255, 255, 255));
        withdrowButton.setText("Withdraw");
        withdrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrowButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("first name:");

        jLabel2.setText("last name:");

        jLabel3.setText("percentage:");

        jLabel4.setText("account:");

        backButton.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(withdrowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(accountInput)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(sNameInput)
                                        .addComponent(fNameInput)
                                        .addComponent(percentInput, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(percentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(accountInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(editButton)
                .addGap(18, 18, 18)
                .addComponent(withdrowButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backButton)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
       String firstName = fNameInput.getText();
        String secondName = sNameInput.getText();
        Double percent = Double.parseDouble(percentInput.getText());
        if(firstName.isEmpty()){
            JOptionPane.showMessageDialog(this,"first name is empty");
        }else if(secondName.isEmpty()){
            JOptionPane.showMessageDialog(this,"second name field is empty");
        }else if(percentInput.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"percentage field is empty");
        }else{
            
           try {
               TourGuidesInterface gu = new TourGuides(firstName, secondName,pd.getTourGuide().getAccount(),percent,pd.getTourGuide().getId());
               int res = app.updateTourGuide(gu);
               if(res>=0){
                   app.sendMessageToAll("update tour guide successfully");
                   app.refreshGuides(app.sendAllGuides());
                   pd.getTourGuide().setFirstName(firstName);
                   pd.getTourGuide().setSecondName(secondName);
                   pd.getTourGuide().setPercent(percent);
               }else{
                   app.sendMessageToAll("tour guide could not be updated");
               }
           } catch (RemoteException ex) {
               Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
           }
             
            
        }
    }                                          

                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhotographerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhotographerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhotographerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhotographerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PhotographerGUI().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NotBoundException ex) {
                    Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
            }
        });
    }//GEN-LAST:event_editButtonActionPerformed

    private void withdrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrowButtonActionPerformed
        try {
            // TODO add your handling code here:
            Double ammount = Double.parseDouble(JOptionPane.showInputDialog(this,"Enter your ammount"));
            if(ammount.isNaN() || ammount < 0 ){
                JOptionPane.showMessageDialog(this,"your amount incurrect");
            }else if(ammount > pd.getTourGuide().getAccount()){
                JOptionPane.showMessageDialog(this,"your amount is more than your account");
            }else{
                pd.getTourGuide().withdraw(ammount);
                //                JOptionPane.showMessageDialog(this,"your account is "+pd.getPhotogragher().getAccount());
                app.withDrowAccountTourGuide(pd.getTourGuide(), ammount);
                accountInput.setText(pd.getTourGuide().getAccount()+"");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this,"your amount incurrect");
        }
    }//GEN-LAST:event_withdrowButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        try {
            // TODO add your handling code here:
            new GuidesGUI().setVisible(true);
            app.logout(this);
            this.dispose();
        } catch (RemoteException ex) {
            Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountInput;
    private javax.swing.JButton backButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField fNameInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField percentInput;
    private javax.swing.JTextField sNameInput;
    private javax.swing.JButton withdrowButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recieveManager(String firstName, String secondName, double account, double percent) throws RemoteException {
                Manager manager = Manager.getManager();
        manager.setAccount(account);
        manager.setPercent(percent);
        manager.setFirstName(firstName);
        manager.setSecondName(secondName);
    }

    @Override
    public void reciveIdPhotographer(PhotogragherInterface ph, int selectedIndex) throws RemoteException {
    }

    @Override
    public void reciveMessage(String message) throws RemoteException {
          SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(this,message);
        });
    }

    @Override
    public void recivePhotographers(ArrayList<PhotogragherInterface> phs) throws RemoteException {
    }

    @Override
    public void reciveGuides(ArrayList<TourGuidesInterface> gus) throws RemoteException {
         boolean b = false;
//        photographers = app.sendAllPhotographers();
        guides = gus;
        for(TourGuidesInterface gu:guides){
            if(gu.getId() == pd.getTourGuide().getId()){
                pd.setTourGuide(gu);
                this.fNameInput.setText(pd.getTourGuide().getFirstName());
                this.sNameInput.setText(pd.getTourGuide().getSecondName());
                this.percentInput.setText(pd.getTourGuide().getPercent()+"");
                this.accountInput.setText(pd.getTourGuide().getAccount()+"");
                b=true;
                break;
            }
        }
        if(!b){
             try {
                    new GuidesGUI().setVisible(true);
                } catch (NotBoundException ex) {
                    Logger.getLogger(GuideGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                app.logout(this);
                this.dispose();
        }
        
    }

    @Override
    public void reciveValueCoin(double value, String type) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveSales(ArrayList<SalesInterface> sales) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reciveOutlayList(ArrayList<Outlay> outlayList) throws RemoteException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
